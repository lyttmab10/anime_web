<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\News;
use Illuminate\Support\Facades\Auth;

class NewsController extends Controller
{
    // Display a listing of the news
    public function index(Request $request)
    {
        $query = News::published()->orderBy('published_at', 'desc');
        
        // Filter by type if specified
        if ($request->has('type') && in_array($request->type, ['news', 'blog', 'season_summary', 'analysis'])) {
            $query = $query->ofType($request->type);
        }
        
        // Search functionality
        if ($request->has('search') && !empty($request->search)) {
            $search = $request->search;
            $query = $query->where(function($q) use ($search) {
                $q->where('title', 'LIKE', "%{$search}%")
                  ->orWhere('content', 'LIKE', "%{$search}%")
                  ->orWhere('summary', 'LIKE', "%{$search}%");
            });
        }
        
        $news = $query->paginate(12);
        
        return view('news.index', compact('news'));
    }
    
    // Display the specified news article
    public function show($slug)
    {
        $news = News::where('slug', $slug)->published()->firstOrFail();
        
        // Increment the view count
        $news->increment('views');
        
        // Get related articles (same type, published)
        $relatedNews = News::where('type', $news->type)
                          ->where('id', '!=', $news->id)
                          ->published()
                          ->limit(4)
                          ->get();
        
        return view('news.show', compact('news', 'relatedNews'));
    }
    
    // Display the admin news listing (for creating/editing)
    public function adminIndex()
    {
        $news = News::orderBy('created_at', 'desc')->paginate(15);
        
        return view('news.admin.index', compact('news'));
    }
    
    // Show the form for creating a new news article
    public function create()
    {
        $this->authorize('create', News::class);
        
        return view('news.admin.create');
    }
    
    // Store a newly created news article
    public function store(Request $request)
    {
        $this->authorize('create', News::class);
        
        $request->validate([
            'title' => 'required|string|max:255',
            'summary' => 'nullable|string|max:500',
            'content' => 'required|string',
            'image_url' => 'nullable|url',
            'type' => 'required|in:news,blog,season_summary,analysis',
            'is_published' => 'boolean',
            'published_at' => 'nullable|date',
            'tags' => 'nullable|array',
            'tags.*' => 'string|max:50',
        ]);
        
        $news = new News();
        $news->user_id = Auth::id();
        $news->title = $request->title;
        $news->slug = $request->slug; // This will be auto-generated by the mutator if empty
        $news->summary = $request->summary;
        $news->content = $request->content;
        $news->image_url = $request->image_url;
        $news->type = $request->type;
        $news->is_published = $request->is_published ?? false;
        $news->published_at = $request->is_published ? ($request->published_at ?? now()) : null;
        $news->author_name = Auth::user()->name;
        $news->tags = $request->tags ?? [];
        
        $news->save();
        
        return redirect()->route('news.admin.index')->with('status', 'News article created successfully.');
    }
    
    // Show the form for editing the specified news article
    public function edit(News $news)
    {
        $this->authorize('update', $news);
        
        return view('news.admin.edit', compact('news'));
    }
    
    // Update the specified news article
    public function update(Request $request, News $news)
    {
        $this->authorize('update', $news);
        
        $request->validate([
            'title' => 'required|string|max:255',
            'summary' => 'nullable|string|max:500',
            'content' => 'required|string',
            'image_url' => 'nullable|url',
            'type' => 'required|in:news,blog,season_summary,analysis',
            'is_published' => 'boolean',
            'published_at' => 'nullable|date',
            'tags' => 'nullable|array',
            'tags.*' => 'string|max:50',
        ]);
        
        $news->title = $request->title;
        $news->slug = $request->slug; // This will be auto-generated by the mutator if empty
        $news->summary = $request->summary;
        $news->content = $request->content;
        $news->image_url = $request->image_url;
        $news->type = $request->type;
        $isPublishedChanged = $news->is_published != ($request->is_published ?? false);
        $news->is_published = $request->is_published ?? false;
        
        if ($request->is_published && $isPublishedChanged) {
            $news->published_at = $request->published_at ?? now();
        }
        
        $news->tags = $request->tags ?? [];
        
        $news->save();
        
        return redirect()->route('news.admin.index')->with('status', 'News article updated successfully.');
    }
    
    // Remove the specified news article
    public function destroy(News $news)
    {
        $this->authorize('delete', $news);
        
        $news->delete();
        
        return redirect()->route('news.admin.index')->with('status', 'News article deleted successfully.');
    }
}
